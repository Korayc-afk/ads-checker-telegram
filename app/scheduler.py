import os
import sys
import httpx
from dotenv import load_dotenv
from datetime import datetime
import asyncio

# .env dosyasÄ±ndaki deÄŸiÅŸkenleri yÃ¼kler
load_dotenv()

# Proje ana dizinini Python'un import yoluna ekler
# Bu, Render (ve systemd) gibi ortamlarda app.models ve app.serp'in bulunmasÄ±nÄ± saÄŸlar
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.models import get_due_jobs, update_job_next_run, init_db
from app.serp import check_ads

# --- Ortam DeÄŸiÅŸkenleri ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NOTIFICATION_GROUP_ID = os.getenv("TELEGRAM_NOTIFICATION_GROUP_ID")
API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

def send_telegram_notification(chat_id: str, message: str):
    """Verilen sohbet ID'sine Telegram Ã¼zerinden dÃ¼z metin mesaj gÃ¶nderir."""
    payload = {'chat_id': chat_id, 'text': message}
    try:
        with httpx.Client() as client:
            # Ä°steÄŸi 10 saniye zaman aÅŸÄ±mÄ± ile gÃ¶nder
            r = client.post(API_URL, json=payload, timeout=10)
            r.raise_for_status() # Hata varsa (4xx, 5xx) exception fÄ±rlat
        print(f"-> Bildirim baÅŸarÄ±yla gÃ¶nderildi: {chat_id}")
    except Exception as e:
        print(f"-> HATA: Bildirim gÃ¶nderilemedi: {chat_id}, Hata: {e}")

async def run_job_once():
    """
    Bu fonksiyon SADECE BÄ°R KEZ Ã§alÄ±ÅŸÄ±r ve kapanÄ±r.
    Render'daki harici Cron Job tarafÄ±ndan tetiklenmek iÃ§in tasarlanmÄ±ÅŸtÄ±r.
    """
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Cron Job tetiklendi. ZamanÄ± gelmiÅŸ gÃ¶revler aranÄ±yor...")
    
    # Her Ã§alÄ±ÅŸtÄ±ÄŸÄ±nda veritabanÄ± baÄŸlantÄ±sÄ±nÄ± ve tablolarÄ± garantiler
    init_db()
    
    if not NOTIFICATION_GROUP_ID:
        print("UYARI: .env dosyasÄ±nda TELEGRAM_NOTIFICATION_GROUP_ID bulunamadÄ±.")

    due_jobs = []
    try:
        # VeritabanÄ±ndan zamanÄ± gelmiÅŸ ve aktif olan gÃ¶revleri Ã§ek
        due_jobs = get_due_jobs()
        if due_jobs:
            print(f"-> {len(due_jobs)} adet Ã§alÄ±ÅŸacak gÃ¶rev bulundu.")
        else:
            print("-> Ã‡alÄ±ÅŸtÄ±rÄ±lacak zamanÄ± gelmiÅŸ gÃ¶rev bulunamadÄ±.")
            
    except Exception as e:
        print(f"VeritabanÄ±ndan gÃ¶revler alÄ±nÄ±rken hata oluÅŸtu: {e}")
        return # GÃ¶rev alÄ±namazsa devam etmenin anlamÄ± yok

    # Bulunan her gÃ¶rev iÃ§in dÃ¶ngÃ¼ baÅŸlat
    for job in due_jobs:
        # --- Hata Yakalama DÃ¶ngÃ¼nÃ¼n Ä°Ã§inde ---
        # Bu sayede bir gÃ¶rev hata alsa bile, diÄŸer gÃ¶revler Ã§alÄ±ÅŸmaya devam eder.
        try:
            print(f"--> GÃ¶rev Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor: '{job.query}'")
            
            # app/serp.py iÃ§indeki kademeli arama fonksiyonunu Ã§aÄŸÄ±r
            result = await check_ads(q=job.query, device=job.device, location=job.location)
            
            # --- Sadece Reklam Varsa Bildirim GÃ¶nder ---
            if result.get("has_ads"):
                print(f"--> REKLAM BULUNDU! Bildirim hazÄ±rlanÄ±yor...")
                
                # Konum bilgisi ekle (eÄŸer varsa)
                location_info = f" ({result.get('location_used', job.location)})" if result.get('location_used', job.location) else ""
                
                # Bildirim mesajÄ±nÄ±n baÅŸlÄ±ÄŸÄ±
                message_header = (f"ğŸ”” ZamanlanmÄ±ÅŸ UyarÄ±: Reklam Bulundu!\n\n"
                                  f"Sorgu: {job.query}{location_info}\n"
                                  f"Reklam SayÄ±sÄ±: {result.get('ads_count', 0)} adet")
                
                # Reklam detaylarÄ±nÄ± (linkler) mesaja ekle
                ad_lines = []
                ad_details = result.get("ads", [])
                if ad_details:
                    ad_lines.append("\n--- Bulunan Reklamlar ---")
                    for i, ad in enumerate(ad_details, start=1):
                        title = ad.get("title", "BaÅŸlÄ±k Yok")
                        url = ad.get("url", "URL Yok")
                        ad_lines.append(f"{i}) {title}\n   â”” {url}")
                
                message = message_header + "\n" + "\n\n".join(ad_lines)

                # Hedef ID'yi belirle (gÃ¶reve Ã¶zel ID yoksa, varsayÄ±lan grup ID'sini kullan)
                target_chat_id = job.telegram_user_id or NOTIFICATION_GROUP_ID
                if target_chat_id:
                    send_telegram_notification(target_chat_id, message)
            else:
                print(f"--> Reklam bulunamadÄ±, bildirim gÃ¶nderilmiyor (Sessiz Mod).")
            
            # GÃ¶revi baÅŸarÄ±yla tamamlandÄ± olarak iÅŸaretle ve bir sonraki Ã§alÄ±ÅŸma zamanÄ±nÄ± ayarla
            update_job_next_run(job.id, job.interval_minutes)
            print(f"--> GÃ¶rev tamamlandÄ± ve gÃ¼ncellendi: '{job.query}'")

        except Exception as e:
            # Bir gÃ¶rev hata alÄ±rsa, bunu logla ama dÃ¶ngÃ¼yÃ¼ kÄ±rma
            print(f"!!! HATA: '{job.query}' gÃ¶revi Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rken bir hata oluÅŸtu: {e}")
            print(f"!!! DiÄŸer gÃ¶revlere devam ediliyor...")
        # --- Hata Yakalama BitiÅŸi ---
            
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Cron Job tamamlandÄ±.")

if __name__ == "__main__":
    # Bu script doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda (Render Cron Job gibi)
    # run_job_once fonksiyonunu Ã§alÄ±ÅŸtÄ±rÄ±r ve biter.
    asyncio.run(run_job_once())